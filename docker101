* store.docker.com
* Docker CE (free) / Docker EE (paid)
* Edge (beta) released monthly / Stable (quarterly)
* play-with-docker.com

* script: get.docker.com
* store: https://docs.docker.com/install/linux/docker-ce/ubuntu/

> sudo apt-get update
> sudo apt-get install curl

* Add user to docker group
> sudo usermod -aG docker rufom
> docker version

> https://docs.docker.com/

* docker-machine https://docs.docker.com/machine/install-machine/
* OR
* https://github.com/docker/machine/releases > for latest release version
> docker-machine version

* docker-compose https://docs.docker.com/compose/install/
* OR
* https://github.com/docker/compose/releases > for latest release version
* sudo -i > for interactive 
* exit > to exit interactive
> docker-compose version

> sudo apt-get install git
> git version
> mkdir code
> git clone https://github.com/BretFisher/udemy-docker-mastery.git

> sudo add-apt-repository ppa:git-core/ppa
> sudo apt-get update
> sudo apt-get install git

> cd ~/code/udemy-docker-mastery
> code .

> Docker Engine or Docker CE
> Docker Data Center or Docker EE



SECTION 2

> docker version
> docker info
> docker
* Docker command format
** docker <command> <subcommand> (options)
** old way: docker <command> (options)

* Image is the application we want to run.
* Container is an instance of that image running as a process.
* Can have many containers running off the same image.
* Docker's default image registry: hub.docker.com

> docker container run --publish 80:80 nginx 
* nginx:latest by default
> docker container run --publish 80:80 --detach nginx
> docker container ls OR docker ps
> docker container stop <container_id>
> docker container ls -a
** docker container run : start a new container
** docker container start : start an existing stopped one
> docker container run --publish 80:80 --detach --name webhost nginx
> docker container logs webhost
> docker container top webhost  (list running processes in specific container)
> docker container rm fa1 2f8 85f
> docker container rm -f fa10

** Container vs VM: It's just a process.
> docker container run --name mongo -d mongo
> ps aux (show all running processes)
> ps aux | grep mongo

> docker container run --publish 80:80 --name nginx -d nginx
> docker container run --publish 8080:80 --name httpd -d httpd
> docker container run --publish 3306:3306 --name mysql -d --env MYSQL_RANDOM_ROOT_PASSWORD=yes mysql
OR > docker container run -d -p 3306:3306 --name db -e MYSQL_RANDOM_ROOT_PASSWORD=yes mysql
** GENERATED ROOT PASSWORD: ohF6auquie4IPie8siena2ICiNgai7ah
> curl localhost
> curl localhost:8080
> curl localhost:3306
> docker container stop nginx httpd mysql
> docker container rm nginx httpd mysql

** docker container top >> process list in one container
** docker container inspect >> show metadata about the container (startup config, volumes, networking, etc)
** docker container stats >> show live performance 	data for all containers

> docker container run -d -p 80:80 --name nginx nginx
> docker container run -d -p 3306:3306 --name mysql -e MYSQL_RANDOM_ROOT_PASSWORD=true mysql

https://www.digitalocean.com/community/tutorials/package-management-basics-apt-yum-dnf-pkg

** docker container run -it >> start new container interactively
** docker container exec -it >> run additional process in running container

> docker container run -it --name proxy nginx bash 
> docker container start -ai ubuntu
> docker container exec -it mysql bash

** Alpine Linux - a small security-focused distribution
> docker pull alpine
> docker container run -it alpine sh

** -p (--publish) always in host:container format
> docker container run -d --name webhost -p 80:80 nginx
> docker container port webhost
> docker container inspect webhost --format '{{.NetworkSettings.IPAddress}}' webhost

** https://docs.docker.com/config/formatting/

> docker network ls (show networks)
> docker network inspect (inspect a network)
> docker network create --driver (create a network)
> docket network connect (attach a network to container)
> docket network disconnect (detach a network from container)

> docker network ls
> docker network inspect bridge
> docker network create my_app_net
> docker container run -d --name new_nginx --network my_app_net nginx

* Docker DNS - Docker daemon has a built-in DNS server that containers use by default
* docker container exec -it new_nginx ping my_nginx

> docker container run --rm -it centos:7 bash
> yum update curl
> curl --version
 
> docker container run --rm -it ubuntu:14.04 bash
> apt-get update && apt-get install curl (OR apt-get install -y curl)
> curl --version

> docker network create dude
> docker container run -d --net dude --net-alias search elasticsearch:2
> docker container run -d --net dude --net-alias search elasticsearch:2
> docker container run --rm --net dude alpine nslookup search
